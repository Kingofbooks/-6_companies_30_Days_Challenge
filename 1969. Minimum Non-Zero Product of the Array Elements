1969. Minimum Non-Zero Product of the Array Elements
Solved
Medium
Topics
Companies
Hint
You are given a positive integer p. Consider an array nums (1-indexed) that consists of the integers in the inclusive range [1, 2p - 1] in their binary representations. You are allowed to do the following operation any number of times:

Choose two elements x and y from nums.
Choose a bit in x and swap it with its corresponding bit in y. Corresponding bit refers to the bit that is in the same position in the other integer.
For example, if x = 1101 and y = 0011, after swapping the 2nd bit from the right, we have x = 1111 and y = 0001.

Find the minimum non-zero product of nums after performing the above operation any number of times. Return this product modulo 109 + 7.

Note: The answer should be the minimum product before the modulo operation is done.

 

Example 1:

Input: p = 1
Output: 1
Explanation: nums = [1].
There is only one element, so the product equals that element.
Example 2:

Input: p = 2
Output: 6
Explanation: nums = [01, 10, 11].
Any swap would either make the product 0 or stay the same.
Thus, the array product of 1 * 2 * 3 = 6 is already minimized.
Example 3:

Input: p = 3
Output: 1512
Explanation: nums = [001, 010, 011, 100, 101, 110, 111]
- In the first operation we can swap the leftmost bit of the second and fifth elements.
    - The resulting array is [001, 110, 011, 100, 001, 110, 111].
- In the second operation we can swap the middle bit of the third and fourth elements.
    - The resulting array is [001, 110, 001, 110, 001, 110, 111].
The array product is 1 * 6 * 1 * 6 * 1 * 6 * 7 = 1512, which is the minimum possible product.
 

Constraints:

1 <= p <= 60
Seen this question in a real interview before?
1/5
Yes
No
Accepted
12.9K
Submissions
35.8K
Acceptance Rate
36.0%
Topics
Companies
Hint 1
Try to minimize each element by swapping bits with any of the elements after it.
Hint 2
If you swap out all the 1s in some element, this will lead to a product of zero.

class Solution {
    public int alternatingSubarray(int[] nums) {
        int n=nums.length;
        if (n==0) return -1;
        int c=1;
        int maxlen=-1;
        int ch=1;
        for(int i=1;i<n;i++){
            int s=nums[i]-nums[i-1];
            if(s==ch){
                c++;
                ch=-ch;
                maxlen=Math.max(maxlen,c);
            }
            else{
                if(s==1){
                    c=2;
                    ch=-1;
                }
                else{
                    c=1;
                    ch=1;
                }
            }
        }
        return maxlen;
    }
}
